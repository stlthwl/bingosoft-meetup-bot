import os
import json
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from api import User
from dotenv import load_dotenv
from datetime import datetime, timezone, timedelta

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot=bot)

user_service = User()
user_cache = {}
moderator = "@oksanaminkevich"


@dp.message(CommandStart())
async def start_handler(message: types.Message):
    telegram_id = message.from_user.id
    web_app_url = f"https://stlthwl.github.io/bingosoft-meetup?telegram_id={telegram_id}"

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è ReplyKeyboardMarkup
    button = KeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", web_app={"url": web_app_url})
    markup = ReplyKeyboardMarkup(keyboard=[[button]], resize_keyboard=True)

    msg = "–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ Pro.Meetup by BingoSoft.\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."

    await message.answer(msg, reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@dp.message(lambda message: message.web_app_data)
async def web_app_message_handler(message: types.Message):
    try:
        data = json.loads(message.web_app_data.data)

        moscow_time = message.date.replace(tzinfo=timezone.utc)
        moscow_time += timedelta(hours=3)  # –î–æ–±–∞–≤–ª—è–µ–º 3 —á–∞—Å–∞ –¥–ª—è –ú–æ—Å–∫–≤—ã
        user_telegram_id = message.from_user.id
        user_cache[user_telegram_id] = {
            'formatted_date_time': moscow_time.strftime("%d.%m.%Y %H:%M"),
            'tg_first_name': message.from_user.first_name,
            'tg_last_name': message.from_user.last_name,
            'tg_user_name': message.from_user.username,
            'form_data': data
        }

        formatted_str = f"–ò–º—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º: {user_cache[user_telegram_id]['tg_first_name']}\n"
        formatted_str += f"–§–∞–º–∏–ª–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º: {user_cache[user_telegram_id]['tg_last_name']}\n"
        formatted_str += f"–ù–∏–∫–Ω–µ–π–º –≤ —Ç–µ–ª–µ–≥—Ä–∞–º: " + f"@{user_cache[user_telegram_id]['tg_user_name']}\n" if \
            user_cache[user_telegram_id]['tg_user_name'] else "–Ω–µ —É–∫–∞–∑–∞–Ωn\n"
        formatted_str += f"telegram_id: {user_telegram_id}\n\n"
        formatted_str += f"–î–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã: \n\n" + f"–ò–º—è: {user_cache[user_telegram_id]['form_data']['name']}\n"
        formatted_str += f"–§–∞–º–∏–ª–∏—è: {user_cache[user_telegram_id]['form_data']['surname']}\n"
        formatted_str += f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {user_cache[user_telegram_id]['form_data']['organization']}\n"

        formatted_str += f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {user_cache[user_telegram_id]['form_data']['position']}\n"
        formatted_str += f"–î–µ–Ω—å 1, –æ—á–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ: {"–î–∞" if user_cache[user_telegram_id]['form_data']['first_day_in_person'] else "–ù–µ—Ç"}\n"
        formatted_str += f"–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ñ–∏—Å–∞: {"–î–∞" if user_cache[user_telegram_id]['form_data']['first_day_office_observe'] else "–ù–µ—Ç"}\n"
        formatted_str += f"–î–µ–Ω—å 2, –≥–æ–Ω–∫–∞: {"–î–∞" if user_cache[user_telegram_id]['form_data']['second_day_race'] else "–ù–µ—Ç"}\n"
        formatted_str += f"–ü–∏–ª–æ—Ç –±–æ–ª–∏–¥–∞ üöó: {"–î–∞" if user_cache[user_telegram_id]['form_data']['pilot'] else "–ù–µ—Ç"}\n"
        formatted_str += f"–ë–æ–ª–µ–ª—å—â–∏–∫ üëÄ: {"–î–∞" if user_cache[user_telegram_id]['form_data']['fan'] else "–ù–µ—Ç"}\n"
        formatted_str += f"–î–µ–Ω—å 2, –ø–∏–∫–∏–Ω–∫: {"–î–∞" if user_cache[user_telegram_id]['form_data']['second_day_picnic'] else "–ù–µ—Ç"}\n"
        formatted_str += f"–ú–∞—Å—Ç–µ—Ä –∫–ª–∞—Å—Å: {"–î–∞" if user_cache[user_telegram_id]['form_data']['master_class'] else "–ù–µ—Ç"}\n"
        formatted_str += f"–ë–∞–Ω—è: {"–î–∞" if user_cache[user_telegram_id]['form_data']['sauna'] else "–ù–µ—Ç"}\n"

        check_response = await user_service.get_user_by_telegram_id(message.chat.id)

        if check_response["code"] == 500:
            await bot.send_message(user_telegram_id, check_response['message'])
        elif check_response["code"] == 200:
            # print(check_response)
            await bot.send_message(message.chat.id, check_response["message"])
            await bot.send_message(chat_id=int(os.getenv('GROUP_ID')), text=f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!\n\n" + formatted_str)
            await bot.send_message(user_telegram_id, f"–ö–æ–Ω—Ç–∞–∫—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ \n{moderator}")
            return
        else:
            response = await user_service.register_user(data)
            if response['code'] == 200:

                await bot.send_message(chat_id=int(os.getenv('GROUP_ID')), text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —É—á–∞—Å—Ç–Ω–∏–∫!\n\n" + formatted_str)
                await bot.send_message(user_telegram_id, f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –æ–∂–∏–¥–∞–π—Ç–µ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –ö–æ–Ω—Ç–∞–∫—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ \n{moderator}")
            else:
                await bot.send_message(message.chat.id, response["message"])

    except Exception as e:
        print(e)
        await bot.send_message(message.from_user.id, "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


@dp.message()
async def message_handler(message: types.Message):
    # await message.reply(message.text) ### PLUG ###
    await start_handler(message)


async def main():
    try:
        await bot.delete_webhook()
        await dp.start_polling(bot)
    finally:
        await bot.session.close()


def start_bot():
    asyncio.create_task(main())


if __name__ == "__main__":
    asyncio.run(main())
